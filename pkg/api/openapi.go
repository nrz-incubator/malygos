// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicScopes      = "basic.Scopes"
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Cluster defines model for Cluster.
type Cluster struct {
	Id         *string        `json:"id,omitempty"`
	Kubeconfig *Kubeconfig    `json:"kubeconfig,omitempty"`
	Name       string         `json:"name"`
	Region     string         `json:"region"`
	Status     *ClusterStatus `json:"status,omitempty"`
}

// ClusterStatus defines model for ClusterStatus.
type ClusterStatus struct {
	Online bool   `json:"online"`
	Phase  string `json:"phase"`
}

// Kubeconfig defines model for Kubeconfig.
type Kubeconfig = string

// RegistrarCluster defines model for RegistrarCluster.
type RegistrarCluster struct {
	Id         *string `json:"id,omitempty"`
	Kubeconfig *string `json:"kubeconfig,omitempty"`
	Name       string  `json:"name"`
	Region     string  `json:"region"`
}

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody = Cluster

// CreateRegistrarClusterJSONRequestBody defines body for CreateRegistrarCluster for application/json ContentType.
type CreateRegistrarClusterJSONRequestBody = RegistrarCluster

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListClusters request
	ListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClusterWithBody request with any body
	CreateClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCluster(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRegistrarClusters request
	ListRegistrarClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRegistrarClusterWithBody request with any body
	CreateRegistrarClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRegistrarCluster(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRegistrarCluster request
	DeleteRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistrarCluster request
	GetRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCluster(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, region, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, region, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRegistrarClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRegistrarClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegistrarClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegistrarClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegistrarCluster(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegistrarClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegistrarClusterRequest(c.Server, clusterRegistrarId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistrarClusterRequest(c.Server, clusterRegistrarId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListClustersRequest generates requests for ListClusters
func NewListClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClusterRequest calls the generic CreateCluster builder with application/json body
func NewCreateClusterRequest(server string, body CreateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClusterRequestWithBody generates requests for CreateCluster with any type of body
func NewCreateClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, region string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, region string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRegistrarClustersRequest generates requests for ListRegistrarClusters
func NewListRegistrarClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRegistrarClusterRequest calls the generic CreateRegistrarCluster builder with application/json body
func NewCreateRegistrarClusterRequest(server string, body CreateRegistrarClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRegistrarClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRegistrarClusterRequestWithBody generates requests for CreateRegistrarCluster with any type of body
func NewCreateRegistrarClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRegistrarClusterRequest generates requests for DeleteRegistrarCluster
func NewDeleteRegistrarClusterRequest(server string, clusterRegistrarId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterRegistrarId", runtime.ParamLocationPath, clusterRegistrarId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegistrarClusterRequest generates requests for GetRegistrarCluster
func NewGetRegistrarClusterRequest(server string, clusterRegistrarId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterRegistrarId", runtime.ParamLocationPath, clusterRegistrarId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListClustersWithResponse request
	ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error)

	// CreateClusterWithBodyWithResponse request with any body
	CreateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error)

	CreateClusterWithResponse(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error)

	// DeleteClusterWithResponse request
	DeleteClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	// GetClusterWithResponse request
	GetClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error)

	// ListRegistrarClustersWithResponse request
	ListRegistrarClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRegistrarClustersResponse, error)

	// CreateRegistrarClusterWithBodyWithResponse request with any body
	CreateRegistrarClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error)

	CreateRegistrarClusterWithResponse(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error)

	// DeleteRegistrarClusterWithResponse request
	DeleteRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*DeleteRegistrarClusterResponse, error)

	// GetRegistrarClusterWithResponse request
	GetRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*GetRegistrarClusterResponse, error)
}

type ListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Clusters []Cluster `json:"clusters"`
		Warnings *[]string `json:"warnings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Cluster
}

// Status returns HTTPResponse.Status
func (r CreateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRegistrarClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Clusters []RegistrarCluster `json:"clusters"`
		Warnings *[]string          `json:"warnings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRegistrarClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRegistrarClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRegistrarClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistrarCluster
}

// Status returns HTTPResponse.Status
func (r CreateRegistrarClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRegistrarClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRegistrarClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRegistrarClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRegistrarClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistrarClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarCluster
}

// Status returns HTTPResponse.Status
func (r GetRegistrarClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistrarClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListClustersWithResponse request returning *ListClustersResponse
func (c *ClientWithResponses) ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	rsp, err := c.ListClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClustersResponse(rsp)
}

// CreateClusterWithBodyWithResponse request with arbitrary body returning *CreateClusterResponse
func (c *ClientWithResponses) CreateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error) {
	rsp, err := c.CreateClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateClusterWithResponse(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error) {
	rsp, err := c.CreateCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, region, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, region, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// ListRegistrarClustersWithResponse request returning *ListRegistrarClustersResponse
func (c *ClientWithResponses) ListRegistrarClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRegistrarClustersResponse, error) {
	rsp, err := c.ListRegistrarClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRegistrarClustersResponse(rsp)
}

// CreateRegistrarClusterWithBodyWithResponse request with arbitrary body returning *CreateRegistrarClusterResponse
func (c *ClientWithResponses) CreateRegistrarClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error) {
	rsp, err := c.CreateRegistrarClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegistrarClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateRegistrarClusterWithResponse(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error) {
	rsp, err := c.CreateRegistrarCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegistrarClusterResponse(rsp)
}

// DeleteRegistrarClusterWithResponse request returning *DeleteRegistrarClusterResponse
func (c *ClientWithResponses) DeleteRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*DeleteRegistrarClusterResponse, error) {
	rsp, err := c.DeleteRegistrarCluster(ctx, clusterRegistrarId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegistrarClusterResponse(rsp)
}

// GetRegistrarClusterWithResponse request returning *GetRegistrarClusterResponse
func (c *ClientWithResponses) GetRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*GetRegistrarClusterResponse, error) {
	rsp, err := c.GetRegistrarCluster(ctx, clusterRegistrarId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistrarClusterResponse(rsp)
}

// ParseListClustersResponse parses an HTTP response from a ListClustersWithResponse call
func ParseListClustersResponse(rsp *http.Response) (*ListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Clusters []Cluster `json:"clusters"`
			Warnings *[]string `json:"warnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateClusterResponse parses an HTTP response from a CreateClusterWithResponse call
func ParseCreateClusterResponse(rsp *http.Response) (*CreateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRegistrarClustersResponse parses an HTTP response from a ListRegistrarClustersWithResponse call
func ParseListRegistrarClustersResponse(rsp *http.Response) (*ListRegistrarClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRegistrarClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Clusters []RegistrarCluster `json:"clusters"`
			Warnings *[]string          `json:"warnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRegistrarClusterResponse parses an HTTP response from a CreateRegistrarClusterWithResponse call
func ParseCreateRegistrarClusterResponse(rsp *http.Response) (*CreateRegistrarClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRegistrarClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistrarCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRegistrarClusterResponse parses an HTTP response from a DeleteRegistrarClusterWithResponse call
func ParseDeleteRegistrarClusterResponse(rsp *http.Response) (*DeleteRegistrarClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRegistrarClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRegistrarClusterResponse parses an HTTP response from a GetRegistrarClusterWithResponse call
func ParseGetRegistrarClusterResponse(rsp *http.Response) (*GetRegistrarClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistrarClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all clusters
	// (GET /v1/clusters)
	ListClusters(ctx echo.Context) error
	// Create a new cluster
	// (POST /v1/clusters)
	CreateCluster(ctx echo.Context) error
	// Delete a cluster
	// (DELETE /v1/clusters/{region}/{clusterId})
	DeleteCluster(ctx echo.Context, region string, clusterId string) error
	// Get a cluster
	// (GET /v1/clusters/{region}/{clusterId})
	GetCluster(ctx echo.Context, region string, clusterId string) error
	// List all management clusters
	// (GET /v1/registrars)
	ListRegistrarClusters(ctx echo.Context) error
	// Create a new management cluster
	// (POST /v1/registrars)
	CreateRegistrarCluster(ctx echo.Context) error
	// Delete a management cluster
	// (DELETE /v1/registrars/{clusterRegistrarId})
	DeleteRegistrarCluster(ctx echo.Context, clusterRegistrarId string) error
	// Get a management cluster
	// (GET /v1/registrars/{clusterRegistrarId})
	GetRegistrarCluster(ctx echo.Context, clusterRegistrarId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClusters(ctx)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "region" -------------
	var region string

	err = runtime.BindStyledParameterWithOptions("simple", "region", ctx.Param("region"), &region, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", ctx.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCluster(ctx, region, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "region" -------------
	var region string

	err = runtime.BindStyledParameterWithOptions("simple", "region", ctx.Param("region"), &region, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", ctx.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCluster(ctx, region, clusterId)
	return err
}

// ListRegistrarClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListRegistrarClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRegistrarClusters(ctx)
	return err
}

// CreateRegistrarCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRegistrarCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRegistrarCluster(ctx)
	return err
}

// DeleteRegistrarCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegistrarCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterRegistrarId" -------------
	var clusterRegistrarId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterRegistrarId", ctx.Param("clusterRegistrarId"), &clusterRegistrarId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterRegistrarId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegistrarCluster(ctx, clusterRegistrarId)
	return err
}

// GetRegistrarCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegistrarCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterRegistrarId" -------------
	var clusterRegistrarId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterRegistrarId", ctx.Param("clusterRegistrarId"), &clusterRegistrarId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterRegistrarId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegistrarCluster(ctx, clusterRegistrarId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/v1/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/v1/clusters/:region/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/v1/clusters/:region/:clusterId", wrapper.GetCluster)
	router.GET(baseURL+"/v1/registrars", wrapper.ListRegistrarClusters)
	router.POST(baseURL+"/v1/registrars", wrapper.CreateRegistrarCluster)
	router.DELETE(baseURL+"/v1/registrars/:clusterRegistrarId", wrapper.DeleteRegistrarCluster)
	router.GET(baseURL+"/v1/registrars/:clusterRegistrarId", wrapper.GetRegistrarCluster)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWUY/iNhD+K5bbx4hk230pb3t70gldr6p6j3uoMvEQfE1s155wjVD+e+U4CQQbFkR3",
	"t1VfULDH/ma+bzwzO5qrSisJEi2d76jNN1Cx7vOxrC2CcZ/aKA0GBXQbgrtfbDTQObVohCxom9A/6hXk",
	"Sq5F4ba/N7Cmc/pdur8/7S9PP+4t24RKVkH0QgOFUDK6ZZFhbZ/D6SP47I3b7so/a2GA0/mTxx1RlsmA",
	"olZfIUeHMj0f8KBkKeSh6yulSmDSHdUbZmNRHfnQXzHYx5z4OKE1YOI3KIRFw8xtcgXb16tyJb1ORchr",
	"I7D57PTyzq6YFflDjZsxGTti3Sodr9ggaufKCpgBE1p3y8fmDlDItXKmuZLIcnSfPk76sxI5eVeqjnIO",
	"NjdCYxcnfZDk4dcFQUVyAwyBOEWMBARLck+6JUoSDhWT3H1po7aCAz+w/CIrJlkBFUgcT82+SOelwNK5",
	"8ImVTaGsA6MJ3YKxHv9uls0y55bSIJkWdE5/nN3NMpc1DDcdben2Lh1udf8L6IJzacBcGAvuYhQWHwcj",
	"p4zVSlrP+w9ZNhADsjvLtC5F3p1Ov1qvuH9YYYodQguE6tKX6aLqRWLGsMb9/8aMFLKY3hVk4fTUUeqN",
	"7kSyLpDXsULUehTF3X6f3TvUqeEvarAha1VLPklhOn/aTfLxadkmfTp3f5YJtXVVMdMMmKwsJ6Ba2Yho",
	"j13ODXz5OMHiO8WbqwS7SI0pkWhqaIM8uXsZ2CnX/Vb/4nhCDGBtpCWbhhu3MjDn1cpCtRZyy0rBiZC6",
	"Rm/1U2g14LDSAOMNgb+ERXuxsuPCRF0vGWFEwre9n20yeaXpzlfGNt31SwveegdLQAgT4X23vk8EzQyr",
	"wL+6p1NxLd5TV/XovCsVdCjrdISkx4InB+IFBf4UTF/ko1Dj3uU4yyDp7k9L5/niJ5/tYCcVXvlu4+p6",
	"HQg7zMBouf0A+D9VK3vNEtFr+krqfwA8lL5/1GYYws433+NZ7a27cDA7/ovacWRcOteZQ/OL5B58+53x",
	"SkgaqB/sx9v4CWfPdfSA+5dp7aHEr9vj4/hT+T6F2p3u+yHVN44AEfSrpoHbUmgyK8RiCyrMOC+M1F40",
	"OETy7WxPitDyTHs68Oef7/YRd55r/JEjl3aB2zQdJ4R4rp4aFv5LCmVvXSDOd/03k96PB9F33LZ/BwAA",
	"//9ybNqRbBMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
