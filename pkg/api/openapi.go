// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicScopes      = "basic.Scopes"
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Catalog defines model for Catalog.
type Catalog struct {
	Components []CatalogComponent `json:"components"`
}

// CatalogComponent defines model for CatalogComponent.
type CatalogComponent struct {
	Description      string    `json:"description"`
	Icon             string    `json:"icon"`
	LatestVersion    *string   `json:"latest_version,omitempty"`
	Name             string    `json:"name"`
	PublishedRegions *[]string `json:"published_regions,omitempty"`
	ShortDescription string    `json:"short_description"`
	Url              string    `json:"url"`
	Versions         *[]string `json:"versions,omitempty"`
}

// CatalogComponentVersion defines model for CatalogComponentVersion.
type CatalogComponentVersion struct {
	DeprecationDate  *string   `json:"deprecation_date,omitempty"`
	Description      string    `json:"description"`
	PublicationDate  string    `json:"publication_date"`
	PublishedRegions *[]string `json:"published_regions,omitempty"`
	RemovalDate      *string   `json:"removal_date,omitempty"`
	Version          string    `json:"version"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	Id         *string        `json:"id,omitempty"`
	Kubeconfig *Kubeconfig    `json:"kubeconfig,omitempty"`
	Name       string         `json:"name"`
	Region     string         `json:"region"`
	Status     *ClusterStatus `json:"status,omitempty"`
	Version    string         `json:"version"`
}

// ClusterStatus defines model for ClusterStatus.
type ClusterStatus struct {
	Online bool   `json:"online"`
	Phase  string `json:"phase"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// Kubeconfig defines model for Kubeconfig.
type Kubeconfig = string

// RegistrarCluster defines model for RegistrarCluster.
type RegistrarCluster struct {
	Id         *string     `json:"id,omitempty"`
	Kubeconfig *Kubeconfig `json:"kubeconfig,omitempty"`
	Name       string      `json:"name"`
	Region     string      `json:"region"`
}

// SubscribedClusters defines model for SubscribedClusters.
type SubscribedClusters struct {
	Clusters []struct {
		ClusterId *string `json:"cluster_id,omitempty"`
		Region    *string `json:"region,omitempty"`
	} `json:"clusters"`
}

// UnsubscribeCatalogComponentVersionParams defines parameters for UnsubscribeCatalogComponentVersion.
type UnsubscribeCatalogComponentVersionParams struct {
	// Region Region to unsubscribe from
	Region string `form:"region" json:"region"`

	// ClusterId Cluster ID to unsubscribe from
	ClusterId string `form:"clusterId" json:"clusterId"`
}

// SubscribeCatalogComponentVersionParams defines parameters for SubscribeCatalogComponentVersion.
type SubscribeCatalogComponentVersionParams struct {
	// Region Region to subscribe to
	Region string `form:"region" json:"region"`

	// ClusterId Cluster ID to subscribe to
	ClusterId string `form:"clusterId" json:"clusterId"`
}

// AddCatalogComponentJSONRequestBody defines body for AddCatalogComponent for application/json ContentType.
type AddCatalogComponentJSONRequestBody = CatalogComponent

// AddCatalogComponentVersionJSONRequestBody defines body for AddCatalogComponentVersion for application/json ContentType.
type AddCatalogComponentVersionJSONRequestBody = CatalogComponentVersion

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody = Cluster

// CreateRegistrarClusterJSONRequestBody defines body for CreateRegistrarCluster for application/json ContentType.
type CreateRegistrarClusterJSONRequestBody = RegistrarCluster

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListCatalogComponents request
	ListCatalogComponents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCatalogComponentWithBody request with any body
	AddCatalogComponentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCatalogComponent(ctx context.Context, body AddCatalogComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogComponent request
	DeleteCatalogComponent(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogComponent request
	GetCatalogComponent(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCatalogComponentVersionWithBody request with any body
	AddCatalogComponentVersionWithBody(ctx context.Context, componentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCatalogComponentVersion(ctx context.Context, componentName string, body AddCatalogComponentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogComponentVersion request
	DeleteCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogComponentVersion request
	GetCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeCatalogComponentVersion request
	UnsubscribeCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, params *UnsubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCatalogComponentVersionSubscriptions request
	ListCatalogComponentVersionSubscriptions(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeCatalogComponentVersion request
	SubscribeCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, params *SubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusters request
	ListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClusterWithBody request with any body
	CreateClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCluster(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusterSubscriptions request
	ListClusterSubscriptions(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRegistrarClusters request
	ListRegistrarClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRegistrarClusterWithBody request with any body
	CreateRegistrarClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRegistrarCluster(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRegistrarCluster request
	DeleteRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistrarCluster request
	GetRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListCatalogComponents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogComponentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCatalogComponentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCatalogComponentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCatalogComponent(ctx context.Context, body AddCatalogComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCatalogComponentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogComponent(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogComponentRequest(c.Server, componentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogComponent(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogComponentRequest(c.Server, componentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCatalogComponentVersionWithBody(ctx context.Context, componentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCatalogComponentVersionRequestWithBody(c.Server, componentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCatalogComponentVersion(ctx context.Context, componentName string, body AddCatalogComponentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCatalogComponentVersionRequest(c.Server, componentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogComponentVersionRequest(c.Server, componentName, componentVersion)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogComponentVersionRequest(c.Server, componentName, componentVersion)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, params *UnsubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeCatalogComponentVersionRequest(c.Server, componentName, componentVersion, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCatalogComponentVersionSubscriptions(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogComponentVersionSubscriptionsRequest(c.Server, componentName, componentVersion)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeCatalogComponentVersion(ctx context.Context, componentName string, componentVersion string, params *SubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeCatalogComponentVersionRequest(c.Server, componentName, componentVersion, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCluster(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, region, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, region, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusterSubscriptions(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClusterSubscriptionsRequest(c.Server, region, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRegistrarClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRegistrarClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegistrarClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegistrarClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegistrarCluster(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegistrarClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegistrarClusterRequest(c.Server, clusterRegistrarId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistrarCluster(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistrarClusterRequest(c.Server, clusterRegistrarId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListCatalogComponentsRequest generates requests for ListCatalogComponents
func NewListCatalogComponentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCatalogComponentRequest calls the generic AddCatalogComponent builder with application/json body
func NewAddCatalogComponentRequest(server string, body AddCatalogComponentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCatalogComponentRequestWithBody(server, "application/json", bodyReader)
}

// NewAddCatalogComponentRequestWithBody generates requests for AddCatalogComponent with any type of body
func NewAddCatalogComponentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogComponentRequest generates requests for DeleteCatalogComponent
func NewDeleteCatalogComponentRequest(server string, componentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogComponentRequest generates requests for GetCatalogComponent
func NewGetCatalogComponentRequest(server string, componentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCatalogComponentVersionRequest calls the generic AddCatalogComponentVersion builder with application/json body
func NewAddCatalogComponentVersionRequest(server string, componentName string, body AddCatalogComponentVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCatalogComponentVersionRequestWithBody(server, componentName, "application/json", bodyReader)
}

// NewAddCatalogComponentVersionRequestWithBody generates requests for AddCatalogComponentVersion with any type of body
func NewAddCatalogComponentVersionRequestWithBody(server string, componentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogComponentVersionRequest generates requests for DeleteCatalogComponentVersion
func NewDeleteCatalogComponentVersionRequest(server string, componentName string, componentVersion string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "componentVersion", runtime.ParamLocationPath, componentVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogComponentVersionRequest generates requests for GetCatalogComponentVersion
func NewGetCatalogComponentVersionRequest(server string, componentName string, componentVersion string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "componentVersion", runtime.ParamLocationPath, componentVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnsubscribeCatalogComponentVersionRequest generates requests for UnsubscribeCatalogComponentVersion
func NewUnsubscribeCatalogComponentVersionRequest(server string, componentName string, componentVersion string, params *UnsubscribeCatalogComponentVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "componentVersion", runtime.ParamLocationPath, componentVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s/versions/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCatalogComponentVersionSubscriptionsRequest generates requests for ListCatalogComponentVersionSubscriptions
func NewListCatalogComponentVersionSubscriptionsRequest(server string, componentName string, componentVersion string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "componentVersion", runtime.ParamLocationPath, componentVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s/versions/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscribeCatalogComponentVersionRequest generates requests for SubscribeCatalogComponentVersion
func NewSubscribeCatalogComponentVersionRequest(server string, componentName string, componentVersion string, params *SubscribeCatalogComponentVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentName", runtime.ParamLocationPath, componentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "componentVersion", runtime.ParamLocationPath, componentVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog/components/%s/versions/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClustersRequest generates requests for ListClusters
func NewListClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClusterRequest calls the generic CreateCluster builder with application/json body
func NewCreateClusterRequest(server string, body CreateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClusterRequestWithBody generates requests for CreateCluster with any type of body
func NewCreateClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, region string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, region string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClusterSubscriptionsRequest generates requests for ListClusterSubscriptions
func NewListClusterSubscriptionsRequest(server string, region string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRegistrarClustersRequest generates requests for ListRegistrarClusters
func NewListRegistrarClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRegistrarClusterRequest calls the generic CreateRegistrarCluster builder with application/json body
func NewCreateRegistrarClusterRequest(server string, body CreateRegistrarClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRegistrarClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRegistrarClusterRequestWithBody generates requests for CreateRegistrarCluster with any type of body
func NewCreateRegistrarClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRegistrarClusterRequest generates requests for DeleteRegistrarCluster
func NewDeleteRegistrarClusterRequest(server string, clusterRegistrarId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterRegistrarId", runtime.ParamLocationPath, clusterRegistrarId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegistrarClusterRequest generates requests for GetRegistrarCluster
func NewGetRegistrarClusterRequest(server string, clusterRegistrarId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterRegistrarId", runtime.ParamLocationPath, clusterRegistrarId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registrars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListCatalogComponentsWithResponse request
	ListCatalogComponentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCatalogComponentsResponse, error)

	// AddCatalogComponentWithBodyWithResponse request with any body
	AddCatalogComponentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCatalogComponentResponse, error)

	AddCatalogComponentWithResponse(ctx context.Context, body AddCatalogComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCatalogComponentResponse, error)

	// DeleteCatalogComponentWithResponse request
	DeleteCatalogComponentWithResponse(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*DeleteCatalogComponentResponse, error)

	// GetCatalogComponentWithResponse request
	GetCatalogComponentWithResponse(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*GetCatalogComponentResponse, error)

	// AddCatalogComponentVersionWithBodyWithResponse request with any body
	AddCatalogComponentVersionWithBodyWithResponse(ctx context.Context, componentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCatalogComponentVersionResponse, error)

	AddCatalogComponentVersionWithResponse(ctx context.Context, componentName string, body AddCatalogComponentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCatalogComponentVersionResponse, error)

	// DeleteCatalogComponentVersionWithResponse request
	DeleteCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*DeleteCatalogComponentVersionResponse, error)

	// GetCatalogComponentVersionWithResponse request
	GetCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*GetCatalogComponentVersionResponse, error)

	// UnsubscribeCatalogComponentVersionWithResponse request
	UnsubscribeCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, params *UnsubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*UnsubscribeCatalogComponentVersionResponse, error)

	// ListCatalogComponentVersionSubscriptionsWithResponse request
	ListCatalogComponentVersionSubscriptionsWithResponse(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*ListCatalogComponentVersionSubscriptionsResponse, error)

	// SubscribeCatalogComponentVersionWithResponse request
	SubscribeCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, params *SubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*SubscribeCatalogComponentVersionResponse, error)

	// ListClustersWithResponse request
	ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error)

	// CreateClusterWithBodyWithResponse request with any body
	CreateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error)

	CreateClusterWithResponse(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error)

	// DeleteClusterWithResponse request
	DeleteClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	// GetClusterWithResponse request
	GetClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error)

	// ListClusterSubscriptionsWithResponse request
	ListClusterSubscriptionsWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*ListClusterSubscriptionsResponse, error)

	// ListRegistrarClustersWithResponse request
	ListRegistrarClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRegistrarClustersResponse, error)

	// CreateRegistrarClusterWithBodyWithResponse request with any body
	CreateRegistrarClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error)

	CreateRegistrarClusterWithResponse(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error)

	// DeleteRegistrarClusterWithResponse request
	DeleteRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*DeleteRegistrarClusterResponse, error)

	// GetRegistrarClusterWithResponse request
	GetRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*GetRegistrarClusterResponse, error)
}

type ListCatalogComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Catalog
}

// Status returns HTTPResponse.Status
func (r ListCatalogComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCatalogComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CatalogComponent
	JSON400      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AddCatalogComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCatalogComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CatalogComponent
}

// Status returns HTTPResponse.Status
func (r GetCatalogComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCatalogComponentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CatalogComponentVersion
	JSON400      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AddCatalogComponentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCatalogComponentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogComponentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogComponentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogComponentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogComponentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CatalogComponentVersion
}

// Status returns HTTPResponse.Status
func (r GetCatalogComponentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogComponentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeCatalogComponentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r UnsubscribeCatalogComponentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeCatalogComponentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCatalogComponentVersionSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Subscriptions SubscribedClusters `json:"subscriptions"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCatalogComponentVersionSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogComponentVersionSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeCatalogComponentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r SubscribeCatalogComponentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeCatalogComponentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Clusters []Cluster `json:"clusters"`
		Warnings *[]string `json:"warnings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Cluster
}

// Status returns HTTPResponse.Status
func (r CreateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClusterSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Subscriptions CatalogComponentVersion `json:"subscriptions"`
	}
}

// Status returns HTTPResponse.Status
func (r ListClusterSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClusterSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRegistrarClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Clusters []RegistrarCluster `json:"clusters"`
		Warnings *[]string          `json:"warnings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRegistrarClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRegistrarClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRegistrarClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistrarCluster
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateRegistrarClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRegistrarClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRegistrarClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRegistrarClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRegistrarClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistrarClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarCluster
}

// Status returns HTTPResponse.Status
func (r GetRegistrarClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistrarClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListCatalogComponentsWithResponse request returning *ListCatalogComponentsResponse
func (c *ClientWithResponses) ListCatalogComponentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCatalogComponentsResponse, error) {
	rsp, err := c.ListCatalogComponents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogComponentsResponse(rsp)
}

// AddCatalogComponentWithBodyWithResponse request with arbitrary body returning *AddCatalogComponentResponse
func (c *ClientWithResponses) AddCatalogComponentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCatalogComponentResponse, error) {
	rsp, err := c.AddCatalogComponentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCatalogComponentResponse(rsp)
}

func (c *ClientWithResponses) AddCatalogComponentWithResponse(ctx context.Context, body AddCatalogComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCatalogComponentResponse, error) {
	rsp, err := c.AddCatalogComponent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCatalogComponentResponse(rsp)
}

// DeleteCatalogComponentWithResponse request returning *DeleteCatalogComponentResponse
func (c *ClientWithResponses) DeleteCatalogComponentWithResponse(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*DeleteCatalogComponentResponse, error) {
	rsp, err := c.DeleteCatalogComponent(ctx, componentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogComponentResponse(rsp)
}

// GetCatalogComponentWithResponse request returning *GetCatalogComponentResponse
func (c *ClientWithResponses) GetCatalogComponentWithResponse(ctx context.Context, componentName string, reqEditors ...RequestEditorFn) (*GetCatalogComponentResponse, error) {
	rsp, err := c.GetCatalogComponent(ctx, componentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogComponentResponse(rsp)
}

// AddCatalogComponentVersionWithBodyWithResponse request with arbitrary body returning *AddCatalogComponentVersionResponse
func (c *ClientWithResponses) AddCatalogComponentVersionWithBodyWithResponse(ctx context.Context, componentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCatalogComponentVersionResponse, error) {
	rsp, err := c.AddCatalogComponentVersionWithBody(ctx, componentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCatalogComponentVersionResponse(rsp)
}

func (c *ClientWithResponses) AddCatalogComponentVersionWithResponse(ctx context.Context, componentName string, body AddCatalogComponentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCatalogComponentVersionResponse, error) {
	rsp, err := c.AddCatalogComponentVersion(ctx, componentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCatalogComponentVersionResponse(rsp)
}

// DeleteCatalogComponentVersionWithResponse request returning *DeleteCatalogComponentVersionResponse
func (c *ClientWithResponses) DeleteCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*DeleteCatalogComponentVersionResponse, error) {
	rsp, err := c.DeleteCatalogComponentVersion(ctx, componentName, componentVersion, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogComponentVersionResponse(rsp)
}

// GetCatalogComponentVersionWithResponse request returning *GetCatalogComponentVersionResponse
func (c *ClientWithResponses) GetCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*GetCatalogComponentVersionResponse, error) {
	rsp, err := c.GetCatalogComponentVersion(ctx, componentName, componentVersion, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogComponentVersionResponse(rsp)
}

// UnsubscribeCatalogComponentVersionWithResponse request returning *UnsubscribeCatalogComponentVersionResponse
func (c *ClientWithResponses) UnsubscribeCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, params *UnsubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*UnsubscribeCatalogComponentVersionResponse, error) {
	rsp, err := c.UnsubscribeCatalogComponentVersion(ctx, componentName, componentVersion, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeCatalogComponentVersionResponse(rsp)
}

// ListCatalogComponentVersionSubscriptionsWithResponse request returning *ListCatalogComponentVersionSubscriptionsResponse
func (c *ClientWithResponses) ListCatalogComponentVersionSubscriptionsWithResponse(ctx context.Context, componentName string, componentVersion string, reqEditors ...RequestEditorFn) (*ListCatalogComponentVersionSubscriptionsResponse, error) {
	rsp, err := c.ListCatalogComponentVersionSubscriptions(ctx, componentName, componentVersion, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogComponentVersionSubscriptionsResponse(rsp)
}

// SubscribeCatalogComponentVersionWithResponse request returning *SubscribeCatalogComponentVersionResponse
func (c *ClientWithResponses) SubscribeCatalogComponentVersionWithResponse(ctx context.Context, componentName string, componentVersion string, params *SubscribeCatalogComponentVersionParams, reqEditors ...RequestEditorFn) (*SubscribeCatalogComponentVersionResponse, error) {
	rsp, err := c.SubscribeCatalogComponentVersion(ctx, componentName, componentVersion, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeCatalogComponentVersionResponse(rsp)
}

// ListClustersWithResponse request returning *ListClustersResponse
func (c *ClientWithResponses) ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	rsp, err := c.ListClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClustersResponse(rsp)
}

// CreateClusterWithBodyWithResponse request with arbitrary body returning *CreateClusterResponse
func (c *ClientWithResponses) CreateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error) {
	rsp, err := c.CreateClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateClusterWithResponse(ctx context.Context, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error) {
	rsp, err := c.CreateCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, region, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, region, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// ListClusterSubscriptionsWithResponse request returning *ListClusterSubscriptionsResponse
func (c *ClientWithResponses) ListClusterSubscriptionsWithResponse(ctx context.Context, region string, clusterId string, reqEditors ...RequestEditorFn) (*ListClusterSubscriptionsResponse, error) {
	rsp, err := c.ListClusterSubscriptions(ctx, region, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClusterSubscriptionsResponse(rsp)
}

// ListRegistrarClustersWithResponse request returning *ListRegistrarClustersResponse
func (c *ClientWithResponses) ListRegistrarClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRegistrarClustersResponse, error) {
	rsp, err := c.ListRegistrarClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRegistrarClustersResponse(rsp)
}

// CreateRegistrarClusterWithBodyWithResponse request with arbitrary body returning *CreateRegistrarClusterResponse
func (c *ClientWithResponses) CreateRegistrarClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error) {
	rsp, err := c.CreateRegistrarClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegistrarClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateRegistrarClusterWithResponse(ctx context.Context, body CreateRegistrarClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegistrarClusterResponse, error) {
	rsp, err := c.CreateRegistrarCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegistrarClusterResponse(rsp)
}

// DeleteRegistrarClusterWithResponse request returning *DeleteRegistrarClusterResponse
func (c *ClientWithResponses) DeleteRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*DeleteRegistrarClusterResponse, error) {
	rsp, err := c.DeleteRegistrarCluster(ctx, clusterRegistrarId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegistrarClusterResponse(rsp)
}

// GetRegistrarClusterWithResponse request returning *GetRegistrarClusterResponse
func (c *ClientWithResponses) GetRegistrarClusterWithResponse(ctx context.Context, clusterRegistrarId string, reqEditors ...RequestEditorFn) (*GetRegistrarClusterResponse, error) {
	rsp, err := c.GetRegistrarCluster(ctx, clusterRegistrarId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistrarClusterResponse(rsp)
}

// ParseListCatalogComponentsResponse parses an HTTP response from a ListCatalogComponentsWithResponse call
func ParseListCatalogComponentsResponse(rsp *http.Response) (*ListCatalogComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Catalog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCatalogComponentResponse parses an HTTP response from a AddCatalogComponentWithResponse call
func ParseAddCatalogComponentResponse(rsp *http.Response) (*AddCatalogComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCatalogComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogComponent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogComponentResponse parses an HTTP response from a DeleteCatalogComponentWithResponse call
func ParseDeleteCatalogComponentResponse(rsp *http.Response) (*DeleteCatalogComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetCatalogComponentResponse parses an HTTP response from a GetCatalogComponentWithResponse call
func ParseGetCatalogComponentResponse(rsp *http.Response) (*GetCatalogComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogComponent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCatalogComponentVersionResponse parses an HTTP response from a AddCatalogComponentVersionWithResponse call
func ParseAddCatalogComponentVersionResponse(rsp *http.Response) (*AddCatalogComponentVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCatalogComponentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogComponentVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogComponentVersionResponse parses an HTTP response from a DeleteCatalogComponentVersionWithResponse call
func ParseDeleteCatalogComponentVersionResponse(rsp *http.Response) (*DeleteCatalogComponentVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogComponentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetCatalogComponentVersionResponse parses an HTTP response from a GetCatalogComponentVersionWithResponse call
func ParseGetCatalogComponentVersionResponse(rsp *http.Response) (*GetCatalogComponentVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogComponentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogComponentVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnsubscribeCatalogComponentVersionResponse parses an HTTP response from a UnsubscribeCatalogComponentVersionWithResponse call
func ParseUnsubscribeCatalogComponentVersionResponse(rsp *http.Response) (*UnsubscribeCatalogComponentVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeCatalogComponentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListCatalogComponentVersionSubscriptionsResponse parses an HTTP response from a ListCatalogComponentVersionSubscriptionsWithResponse call
func ParseListCatalogComponentVersionSubscriptionsResponse(rsp *http.Response) (*ListCatalogComponentVersionSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogComponentVersionSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Subscriptions SubscribedClusters `json:"subscriptions"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubscribeCatalogComponentVersionResponse parses an HTTP response from a SubscribeCatalogComponentVersionWithResponse call
func ParseSubscribeCatalogComponentVersionResponse(rsp *http.Response) (*SubscribeCatalogComponentVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeCatalogComponentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListClustersResponse parses an HTTP response from a ListClustersWithResponse call
func ParseListClustersResponse(rsp *http.Response) (*ListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Clusters []Cluster `json:"clusters"`
			Warnings *[]string `json:"warnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateClusterResponse parses an HTTP response from a CreateClusterWithResponse call
func ParseCreateClusterResponse(rsp *http.Response) (*CreateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListClusterSubscriptionsResponse parses an HTTP response from a ListClusterSubscriptionsWithResponse call
func ParseListClusterSubscriptionsResponse(rsp *http.Response) (*ListClusterSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClusterSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Subscriptions CatalogComponentVersion `json:"subscriptions"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRegistrarClustersResponse parses an HTTP response from a ListRegistrarClustersWithResponse call
func ParseListRegistrarClustersResponse(rsp *http.Response) (*ListRegistrarClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRegistrarClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Clusters []RegistrarCluster `json:"clusters"`
			Warnings *[]string          `json:"warnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRegistrarClusterResponse parses an HTTP response from a CreateRegistrarClusterWithResponse call
func ParseCreateRegistrarClusterResponse(rsp *http.Response) (*CreateRegistrarClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRegistrarClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistrarCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRegistrarClusterResponse parses an HTTP response from a DeleteRegistrarClusterWithResponse call
func ParseDeleteRegistrarClusterResponse(rsp *http.Response) (*DeleteRegistrarClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRegistrarClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRegistrarClusterResponse parses an HTTP response from a GetRegistrarClusterWithResponse call
func ParseGetRegistrarClusterResponse(rsp *http.Response) (*GetRegistrarClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistrarClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all components in the catalog
	// (GET /v1/catalog)
	ListCatalogComponents(ctx echo.Context) error
	// Add a new component to the catalog
	// (POST /v1/catalog/components)
	AddCatalogComponent(ctx echo.Context) error
	// Delete a component from the catalog
	// (DELETE /v1/catalog/components/{componentName})
	DeleteCatalogComponent(ctx echo.Context, componentName string) error
	// Get a component in the catalog
	// (GET /v1/catalog/components/{componentName})
	GetCatalogComponent(ctx echo.Context, componentName string) error
	// Add a new component version to the catalog
	// (POST /v1/catalog/components/{componentName}/versions)
	AddCatalogComponentVersion(ctx echo.Context, componentName string) error
	// Delete a component version from the catalog
	// (DELETE /v1/catalog/components/{componentName}/versions/{componentVersion})
	DeleteCatalogComponentVersion(ctx echo.Context, componentName string, componentVersion string) error
	// Get a component version in the catalog
	// (GET /v1/catalog/components/{componentName}/versions/{componentVersion})
	GetCatalogComponentVersion(ctx echo.Context, componentName string, componentVersion string) error
	// Unsubscribe from a component version
	// (DELETE /v1/catalog/components/{componentName}/versions/{componentVersion}/subscriptions)
	UnsubscribeCatalogComponentVersion(ctx echo.Context, componentName string, componentVersion string, params UnsubscribeCatalogComponentVersionParams) error
	// List all subscriptions to a component version
	// (GET /v1/catalog/components/{componentName}/versions/{componentVersion}/subscriptions)
	ListCatalogComponentVersionSubscriptions(ctx echo.Context, componentName string, componentVersion string) error
	// Subscribe to a component version
	// (POST /v1/catalog/components/{componentName}/versions/{componentVersion}/subscriptions)
	SubscribeCatalogComponentVersion(ctx echo.Context, componentName string, componentVersion string, params SubscribeCatalogComponentVersionParams) error
	// List all clusters
	// (GET /v1/clusters)
	ListClusters(ctx echo.Context) error
	// Create a new cluster
	// (POST /v1/clusters)
	CreateCluster(ctx echo.Context) error
	// Delete a cluster
	// (DELETE /v1/clusters/{region}/{clusterId})
	DeleteCluster(ctx echo.Context, region string, clusterId string) error
	// Get a cluster
	// (GET /v1/clusters/{region}/{clusterId})
	GetCluster(ctx echo.Context, region string, clusterId string) error
	// List all subscriptions to a cluster
	// (GET /v1/clusters/{region}/{clusterId}/subscriptions)
	ListClusterSubscriptions(ctx echo.Context, region string, clusterId string) error
	// List all management clusters
	// (GET /v1/registrars)
	ListRegistrarClusters(ctx echo.Context) error
	// Create a new management cluster
	// (POST /v1/registrars)
	CreateRegistrarCluster(ctx echo.Context) error
	// Delete a management cluster
	// (DELETE /v1/registrars/{clusterRegistrarId})
	DeleteRegistrarCluster(ctx echo.Context, clusterRegistrarId string) error
	// Get a management cluster
	// (GET /v1/registrars/{clusterRegistrarId})
	GetRegistrarCluster(ctx echo.Context, clusterRegistrarId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListCatalogComponents converts echo context to params.
func (w *ServerInterfaceWrapper) ListCatalogComponents(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCatalogComponents(ctx)
	return err
}

// AddCatalogComponent converts echo context to params.
func (w *ServerInterfaceWrapper) AddCatalogComponent(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"catalog_admin"})

	ctx.Set(BasicAuthScopes, []string{"catalog_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCatalogComponent(ctx)
	return err
}

// DeleteCatalogComponent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"catalog_admin"})

	ctx.Set(BasicAuthScopes, []string{"catalog_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogComponent(ctx, componentName)
	return err
}

// GetCatalogComponent converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogComponent(ctx, componentName)
	return err
}

// AddCatalogComponentVersion converts echo context to params.
func (w *ServerInterfaceWrapper) AddCatalogComponentVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"catalog_admin"})

	ctx.Set(BasicAuthScopes, []string{"catalog_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCatalogComponentVersion(ctx, componentName)
	return err
}

// DeleteCatalogComponentVersion converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogComponentVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	// ------------- Path parameter "componentVersion" -------------
	var componentVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "componentVersion", ctx.Param("componentVersion"), &componentVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentVersion: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"catalog_admin"})

	ctx.Set(BasicAuthScopes, []string{"catalog_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogComponentVersion(ctx, componentName, componentVersion)
	return err
}

// GetCatalogComponentVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogComponentVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	// ------------- Path parameter "componentVersion" -------------
	var componentVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "componentVersion", ctx.Param("componentVersion"), &componentVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentVersion: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogComponentVersion(ctx, componentName, componentVersion)
	return err
}

// UnsubscribeCatalogComponentVersion converts echo context to params.
func (w *ServerInterfaceWrapper) UnsubscribeCatalogComponentVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	// ------------- Path parameter "componentVersion" -------------
	var componentVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "componentVersion", ctx.Param("componentVersion"), &componentVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentVersion: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UnsubscribeCatalogComponentVersionParams
	// ------------- Required query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, true, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Required query parameter "clusterId" -------------

	err = runtime.BindQueryParameter("form", true, true, "clusterId", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsubscribeCatalogComponentVersion(ctx, componentName, componentVersion, params)
	return err
}

// ListCatalogComponentVersionSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) ListCatalogComponentVersionSubscriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	// ------------- Path parameter "componentVersion" -------------
	var componentVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "componentVersion", ctx.Param("componentVersion"), &componentVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentVersion: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCatalogComponentVersionSubscriptions(ctx, componentName, componentVersion)
	return err
}

// SubscribeCatalogComponentVersion converts echo context to params.
func (w *ServerInterfaceWrapper) SubscribeCatalogComponentVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentName" -------------
	var componentName string

	err = runtime.BindStyledParameterWithOptions("simple", "componentName", ctx.Param("componentName"), &componentName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentName: %s", err))
	}

	// ------------- Path parameter "componentVersion" -------------
	var componentVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "componentVersion", ctx.Param("componentVersion"), &componentVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentVersion: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubscribeCatalogComponentVersionParams
	// ------------- Required query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, true, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Required query parameter "clusterId" -------------

	err = runtime.BindQueryParameter("form", true, true, "clusterId", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubscribeCatalogComponentVersion(ctx, componentName, componentVersion, params)
	return err
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClusters(ctx)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "region" -------------
	var region string

	err = runtime.BindStyledParameterWithOptions("simple", "region", ctx.Param("region"), &region, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", ctx.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCluster(ctx, region, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "region" -------------
	var region string

	err = runtime.BindStyledParameterWithOptions("simple", "region", ctx.Param("region"), &region, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", ctx.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCluster(ctx, region, clusterId)
	return err
}

// ListClusterSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusterSubscriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "region" -------------
	var region string

	err = runtime.BindStyledParameterWithOptions("simple", "region", ctx.Param("region"), &region, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", ctx.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClusterSubscriptions(ctx, region, clusterId)
	return err
}

// ListRegistrarClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListRegistrarClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRegistrarClusters(ctx)
	return err
}

// CreateRegistrarCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRegistrarCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRegistrarCluster(ctx)
	return err
}

// DeleteRegistrarCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegistrarCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterRegistrarId" -------------
	var clusterRegistrarId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterRegistrarId", ctx.Param("clusterRegistrarId"), &clusterRegistrarId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterRegistrarId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegistrarCluster(ctx, clusterRegistrarId)
	return err
}

// GetRegistrarCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegistrarCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterRegistrarId" -------------
	var clusterRegistrarId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterRegistrarId", ctx.Param("clusterRegistrarId"), &clusterRegistrarId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterRegistrarId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"cluster_admin"})

	ctx.Set(BasicAuthScopes, []string{"cluster_admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegistrarCluster(ctx, clusterRegistrarId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/catalog", wrapper.ListCatalogComponents)
	router.POST(baseURL+"/v1/catalog/components", wrapper.AddCatalogComponent)
	router.DELETE(baseURL+"/v1/catalog/components/:componentName", wrapper.DeleteCatalogComponent)
	router.GET(baseURL+"/v1/catalog/components/:componentName", wrapper.GetCatalogComponent)
	router.POST(baseURL+"/v1/catalog/components/:componentName/versions", wrapper.AddCatalogComponentVersion)
	router.DELETE(baseURL+"/v1/catalog/components/:componentName/versions/:componentVersion", wrapper.DeleteCatalogComponentVersion)
	router.GET(baseURL+"/v1/catalog/components/:componentName/versions/:componentVersion", wrapper.GetCatalogComponentVersion)
	router.DELETE(baseURL+"/v1/catalog/components/:componentName/versions/:componentVersion/subscriptions", wrapper.UnsubscribeCatalogComponentVersion)
	router.GET(baseURL+"/v1/catalog/components/:componentName/versions/:componentVersion/subscriptions", wrapper.ListCatalogComponentVersionSubscriptions)
	router.POST(baseURL+"/v1/catalog/components/:componentName/versions/:componentVersion/subscriptions", wrapper.SubscribeCatalogComponentVersion)
	router.GET(baseURL+"/v1/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/v1/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/v1/clusters/:region/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/v1/clusters/:region/:clusterId", wrapper.GetCluster)
	router.GET(baseURL+"/v1/clusters/:region/:clusterId/subscriptions", wrapper.ListClusterSubscriptions)
	router.GET(baseURL+"/v1/registrars", wrapper.ListRegistrarClusters)
	router.POST(baseURL+"/v1/registrars", wrapper.CreateRegistrarCluster)
	router.DELETE(baseURL+"/v1/registrars/:clusterRegistrarId", wrapper.DeleteRegistrarCluster)
	router.GET(baseURL+"/v1/registrars/:clusterRegistrarId", wrapper.GetRegistrarCluster)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaTW/bOBP+KwLf92jETttLc0vbRRF0WyxqtJc0CGhxYrMrkSpJpWsY/u8LivogRerD",
	"sR2n29xsieIMn3k4z2ioDYp5mnEGTEl0sUEyXkGKi59vscIJX+qfmeAZCEWhuOE+QRWkxY//C7hDF+h/",
	"0+b+tJxuWs71trqDthOk1hmgC4SFwGu03U6QgB85FUDQxbVt46YeyhffIS6e9ebznCQgY0EzRTnTf8sZ",
	"pBKULfUMNO64kWAFUt3eg5BdzzKcQvBGli8SKldAbgUsKWcuQN5wF4EJkisu1O2Q57lIgtdLj3ey2UK9",
	"WFjIjwly/2kfSgzHhOdrA2Y7SpmAGOtZbwlWYVSHAClQH5pkz9AISPk9Trrn7+ZLC+NqYBtSbxVBYJNc",
	"KhA+kJQEvfo7X0DM2R1dDu3QD83IPoYb8IK3pMIqH84EZgVzM3gX4Epylh40D/bgNK9dctHiLKHMXuCC",
	"8wQwK4iywhKGvSmnqMaHnPhDCB4IFVSX+w2YYaF5PzhB9eLwGZZUKoHF0yVLb2RDS57nC71XFkDKRQWC",
	"Glt36o0dHHLbAUCfv55L/fJV+eIvRu8UiHNB1Xqu4TSeLbCk8WWuVrUIF7TUV1E9xUqpTJteABYg/NHF",
	"5fZwbZCyO26UmykcF2ppgob+5DSO3iRceYkWXbLo8q+rSPEoFoAVRDrqgoECGVXriziLCKSYEf0rE/ye",
	"EiDWyG8sxQwvIQWm6qfOvun9q6hKtAsfcbJecqmNWbv6Ap2fzc5m2i2eAcMZRRfo5dn52UzvOaxWBWzT",
	"+/Np3NQpSyjWpkNeJNIropdIpWoLkizoJjPOpMH/xWxWAVSWEzjLqnw8/S4NLQz/RxY7BnoXU+1LxO8i",
	"q7zZTtCr2SuvZEGfeDMquuM5Iw530MX1xiHC9c124vDo+mZ7M0EyT1Ms1pVtnCSW8YiySK0gimuPJzak",
	"U7fSy7gMwHtJiFeNmc0AUr3hZH1oXK0i0t12SuSw9eJ6fmT7btTqmxEmeico7gKsg304phmFCbhxxe5x",
	"QklEWZYrY/X18a1ai08EYLKO4B8qNcd7iYtKdG4xSSlDHo+9+w6tLwmJcMTgp7Vd2qh30nq6qX9/wils",
	"zTZMwBR5LtHfFdcDXM+wwCkY6bnedGJSqhzVV3UCQ5VyIscH1Kb0xApLW5duPLoHMknjglka6cw5lrO8",
	"TjqPTp4YM21+AY2/R+SPCWuE7WwreNretkFpeQ/qqfNhdqL0Z5FnLNH2Urf3oJwYjla2dgqY2u/RoyXv",
	"a/1Wd+roH193q7WeWH4dN7pgLoP5e6txDcJpVbly48HqXG9N60bJggco95PYspPNUNQGLDarOFrVUMVt",
	"fPVQPXHKKqLy4eTVROXIPlXFM1cfo6LZSVHGFjiBvXDQQqeaf/+CJ5BVp9I03oplyb4c+4XJqkf3TN5O",
	"o5+LDqNWwLzBq8gMlfUfOYh1Y77udu+zUtN2i67e7WC47NVdkcMri0UVYrKix2arNBsspV6GemdFp4v/",
	"NDVfe8ld9p6opunVWIgpHvJ/r5zypQ0QDkM0ur9abpa5kz2exWtX8XJPL7xc3MemwIlJ+5DCnS9wUtHZ",
	"vnaf7Olg2wMP28R2XNB7ooOy4Tf4+bNW7aBVTXJQ/NF0aoTRQ2nUC5+786F8e0h9spf6i2nTZdlSOK4+",
	"zW2AcMf0RbVrnQF3i1U16KDZOXj8POJLiNDXJj+xYJQt9/mUp+8EuvtYspaKnkPJcpfuls37jiMto+Fs",
	"/bY4f67wOlKTs4rGIzc1bbPhdGhO38kkEqBywWS0WhOhr1TIjUxGkx33egcF5jwFtaJsaWWbh0z9OpDQ",
	"yhXv1Kccyh2GPFUzsobbzRfTjRGw7XRTi8qYlmJNyf5qoRa2Dt1+kI516metxQFTD9Dpcd3C0vZgj7Ac",
	"d6huSNNva/ZCZ1Pt94zW7DGT1UBX7MDRL3thu2xqv6M1VCfs9hL7W5Nnj/fV7l7sf/yltUVeUX292c/N",
	"9keepy5mvY9On1BVG/gCsS/8/vBRJKg/Lu08N2rdD1Okw9m+wtjD/jgVsh/ixy2Vw/bd8H30Y9ddPvtQ",
	"n/yLgMHV7HiEvw8lncI5hJWXsWqdrUM1qooO8LdXYwOwDMit5c/hS9+AO0NVcOCRsSXRfjGty+Uw97sq",
	"518pQrNTJ5z+EvhkoTe1cnAfb7f/BgAA//9RR8zOBzgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
